{"version":3,"sources":["MainPage.tsx","DetailContent.tsx","UploadPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","gridList","width","height","icon","color","select","searchButton","marginTop","MainPage","classes","useState","id","setId","counter","setCounter","content","setContent","visiable","setVisiable","useEffect","document","title","MainDiv","TitleText","onClick","to","FormControl","variant","className","InputLabel","Select","labelId","value","onChange","event","target","label","MenuItem","Button","axios","get","then","res","datas","data","length","console","log","Swal","fire","onDoubleClick","GridList","cellHeight","GridListTile","key","cols","style","ListSubheader","component","map","tile","src","fileurl","alt","GridListTileBar","subtitle","author","actionIcon","pathname","state","IconButton","aria-label","styled","div","text","button","DetailContent","location","registerPlugin","FilePondPluginImageExifOrientation","FilePondPluginImagePreview","UploadPage","files","setFiles","setTitle","setAuthor","SubMainDiv","TextField","fullWidth","allowMultiple","onupdatefiles","labelIdle","bodyFormData","FormData","set","toString","append","file","post","catch","err","App","isEdge","window","navigator","userAgent","indexOf","basename","exact","path","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.26b17f7a.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport styled from '@emotion/styled';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport Button from '@material-ui/core/Button';\r\nimport axios from 'axios';\r\nimport {Link} from \"react-router-dom\";\r\nimport Swal from 'sweetalert2';\r\n\r\ninterface TParams { id: number, title: string, author: string, fileurl: string };\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'space-around',\r\n    overflow: 'hidden',\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  gridList: {\r\n    width: '95%',\r\n    height: '100%',\r\n  },\r\n  icon: {\r\n    color: 'rgba(255, 255, 255, 0.54)',\r\n  },\r\n  select: {\r\n    width: '95%'\r\n  },\r\n  searchButton: {\r\n    width: '95%',\r\n    marginTop: 2\r\n  }\r\n  \r\n}));\r\n\r\nexport default function MainPage() {\r\n  const classes = useStyles();\r\n  const [id, setId] = useState(0);\r\n  const [counter, setCounter] = useState(0);\r\n  const [content, setContent] = useState<Array<TParams>>([\r\n  \r\n  ]);\r\n  const [visiable, setVisiable] = useState(true);\r\n  const handleChange = (event: any) => {\r\n    setId(event.target.value);\r\n  }\r\n  useEffect(() => {\r\n    document.title = \"학습자료 공유 시스템\"\r\n }, []);\r\n  const handleSearch = () => {\r\n    if(id==4 && counter == 7){\r\n      setVisiable(false);\r\n    }\r\n    axios.get(`https://happycastle.xyz:2095/api/postlist?id=${id}`)\r\n    .then(res => {\r\n      const datas = res.data\r\n      setContent( datas );\r\n      if( res.data.length == 0) {\r\n        console.log(\"NO SEARCH DATA\");\r\n        Swal.fire(\"데이터 없음\",\"검색 데이터가 없습니다\",\"error\");\r\n      }\r\n    })\r\n  }\r\n  return (\r\n    <MainDiv>\r\n      <TitleText onClick={() => setCounter(counter + 1)}>\r\n        {visiable ? \"대신고등학교 학습자료 공유방\" : <Link to=\"/uploadfile\">\"대신고등학교 학습자료 공유방\"</Link>}\r\n      </TitleText>\r\n      <FormControl variant=\"outlined\" className={classes.select}>\r\n        <InputLabel id=\"demo-simple-select-outlined-label\">학습자료 목록</InputLabel>\r\n        <Select\r\n          labelId=\"demo-simple-select-outlined-label\"\r\n          id=\"demo-simple-select-outlined\"\r\n          value={id}\r\n          onChange={handleChange}\r\n          label=\"과목\"\r\n          className={classes.select}\r\n        >\r\n          <MenuItem value={0}>==선택해주세요==</MenuItem>\r\n          <MenuItem value={1}>화학</MenuItem>\r\n          <MenuItem value={2}>영어</MenuItem>\r\n          <MenuItem value={3}>문학</MenuItem>\r\n          <MenuItem value={4}>지구과학</MenuItem>\r\n          <MenuItem value={5}>수학1</MenuItem>\r\n          <MenuItem value={6}>수학2</MenuItem>\r\n          <MenuItem value={7}>일본어</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n      <Button variant=\"contained\" color=\"primary\" className={classes.searchButton} onClick={handleSearch} onDoubleClick={() => setVisiable(false)}>\r\n        검색하기\r\n      </Button>\r\n      <GridList cellHeight={180} className={classes.gridList}>\r\n        <GridListTile key=\"Subheader\" cols={2} style={{ height: 'auto' }}>\r\n          <ListSubheader component=\"div\">검색결과</ListSubheader>\r\n        </GridListTile>\r\n        {content.map((tile) => (\r\n          <GridListTile key={tile.title}>\r\n            <img src={tile.fileurl} alt={tile.title} />\r\n            <GridListTileBar\r\n              title={tile.title}\r\n              subtitle={<span>by: {tile.author}</span>}\r\n              actionIcon={\r\n                <Link<TParams> to={{pathname: \"/details\", state: tile}} >\r\n                <IconButton aria-label={`info about ${tile.title}`} className={classes.icon}>\r\n                  <InfoIcon />\r\n                </IconButton>\r\n                </Link>\r\n              }\r\n            />\r\n          </GridListTile>\r\n        ))}\r\n      </GridList>\r\n  </MainDiv>\r\n  )\r\n  \r\n}\r\n\r\nconst MainDiv = styled.div`\r\ndisplay: flex;\r\nflex-direction: column;\r\nalign-items: center;\r\nbackground-color: #ffffff;\r\nmin-height: 100vh;\r\n@import url(https://cdn.jsdelivr.net/gh/moonspam/NanumSquare@1.0/nanumsquare.css);\r\nfont-family: 'NanumSquare', sans-serif;\r\n`;\r\n\r\nconst TitleText = styled.text`\r\n  margin-top: 20px;\r\n  font-size: 30px;\r\n  margin-bottom: 20px;\r\n`;\r\nconst HiddenButton = styled.button`\r\n  color: white;\r\n`;\r\n","import React, { useState, useEffect, ReactPropTypes } from 'react';\r\nimport styled from '@emotion/styled';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport axios from 'axios';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Link,\r\n  RouteComponentProps,\r\n  LinkProps\r\n} from \"react-router-dom\";\r\n\r\ninterface TParams{ id: string, title: string, author: string, fileurl: string };\r\nexport default function DetailContent({location}: RouteComponentProps<{}, {}, TParams>) {\r\n  console.log(location.state.title)\r\n  useEffect(() => {\r\n    document.title = location.state.title;\r\n }, []);\r\n  return (\r\n    <MainDiv>\r\n      <TitleText>\r\n        {location.state.title}\r\n      </TitleText>\r\n      <TitleText>\r\n        {location.state.author}\r\n      </TitleText>\r\n      <img src={location.state.fileurl} />\r\n    </MainDiv>\r\n  )\r\n}\r\n\r\nconst MainDiv = styled.div`\r\ndisplay: flex;\r\nflex-direction: column;\r\nalign-items: center;\r\nbackground-color: #ffffff;\r\nmin-height: 100vh;\r\n@import url(https://cdn.jsdelivr.net/gh/moonspam/NanumSquare@1.0/nanumsquare.css);\r\nfont-family: 'NanumSquare', sans-serif;\r\n`;\r\n\r\nconst TitleText = styled.text`\r\n  margin-top: 20px;\r\n  font-size: 30px;\r\n  margin-bottom: 20px;\r\n`;","import React, { useState, useEffect } from 'react';\r\nimport styled from '@emotion/styled';\r\nimport { FilePond, File, registerPlugin} from 'react-filepond';\r\nimport 'filepond/dist/filepond.min.css'\r\nimport FilePondPluginImageExifOrientation from 'filepond-plugin-image-exif-orientation'\r\nimport FilePondPluginImagePreview from 'filepond-plugin-image-preview'\r\nimport 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css'\r\nimport {TextField} from '@material-ui/core';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport axios from 'axios';\r\nimport Swal from 'sweetalert2';\r\n\r\nregisterPlugin(FilePondPluginImageExifOrientation, FilePondPluginImagePreview)\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'space-around',\r\n    overflow: 'hidden',\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  gridList: {\r\n    width: '100%',\r\n    height: '100%',\r\n  },\r\n  icon: {\r\n    color: 'rgba(255, 255, 255, 0.54)',\r\n  },\r\n  select: {\r\n    width: '100%'\r\n  },\r\n  searchButton: {\r\n    width: '100%',\r\n    marginTop: 2\r\n  }\r\n  \r\n}));\r\n\r\n\r\nexport default function UploadPage() {\r\n  const classes = useStyles();\r\n  const [files, setFiles] = useState<Array<File>>([]);\r\n  const [id, setId] = useState(0);\r\n  const [title, setTitle] = useState(\"\");\r\n  const [author, setAuthor] = useState(\"\");\r\n  useEffect(() => {\r\n    document.title = \"파일 업로드\"\r\n }, []);\r\n  const handleChange = (event: any) => {\r\n    setId(event.target.value);\r\n  }\r\n  const handleSearch = () => {\r\n    console.log(files[0])\r\n    var bodyFormData = new FormData();\r\n    if ( id == 0 || title == \"\" || author == \"\" || files.length == 0) {\r\n      Swal.fire(\"데이터 없음\", \"데이터가 없습니다\", \"error\")\r\n    } else {\r\n      bodyFormData.set('id', id.toString());\r\n      bodyFormData.append('author', author);\r\n      bodyFormData.append('title', title);\r\n      //or let file = document.querySelector('input[type=file]').files[0];\r\n      bodyFormData.append('multiplefiles', files[0].file)\r\n      axios.post(`https://happycastle.xyz:2095/api/upload`, bodyFormData)\r\n      .then(res => {\r\n        Swal.fire(\"성공\",\"데이터 업로드 성공\",\"info\");\r\n        setFiles([])\r\n        setId(0)\r\n        setTitle(\"\")\r\n        setAuthor(\"\")\r\n      }).catch(err => {\r\n        Swal.fire(\"통신 실패\",\"서버와의 통신에 실패했습니다\",\"error\");\r\n      })\r\n    }\r\n    \r\n  }\r\n  return (\r\n    <MainDiv>\r\n      <SubMainDiv>\r\n        <FormControl variant=\"outlined\" className={classes.select}>\r\n          <InputLabel id=\"demo-simple-select-outlined-label\">학습자료 목록</InputLabel>\r\n          <Select\r\n            labelId=\"demo-simple-select-outlined-label\"\r\n            id=\"demo-simple-select-outlined\"\r\n            value={id}\r\n            onChange={handleChange}\r\n            label=\"과목\"\r\n            className={classes.select}\r\n          >\r\n            <MenuItem value={0}>==선택해주세요==</MenuItem>\r\n            <MenuItem value={1}>화학</MenuItem>\r\n            <MenuItem value={2}>영어</MenuItem>\r\n            <MenuItem value={3}>문학</MenuItem>\r\n            <MenuItem value={4}>지구과학</MenuItem>\r\n            <MenuItem value={5}>수학1</MenuItem>\r\n            <MenuItem value={6}>수학2</MenuItem>\r\n            <MenuItem value={7}>일본어</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n        <TextField\r\n            fullWidth={true}\r\n            label=\"제목\"\r\n            id=\"standard-basic\"\r\n            value={title}\r\n            onChange={(event) => setTitle(event.target.value)}\r\n            />\r\n        <TextField\r\n            fullWidth={true}\r\n            label=\"업로드 작성자\"\r\n            id=\"standard-basic\"\r\n            value={author}\r\n            onChange={(event) => setAuthor(event.target.value)}\r\n            />\r\n        <FilePond\r\n        \r\n        files={files}\r\n        allowMultiple={true}\r\n        onupdatefiles={(files: File[]) => setFiles(files)}\r\n        labelIdle='Drag & Drop your files or <span class=\"filepond--label-action\">Browse</span>'\r\n      />\r\n\r\n      <Button variant=\"contained\" color=\"primary\" className={classes.searchButton} onClick={handleSearch}>\r\n        파일 업로드하기\r\n      </Button>\r\n      </SubMainDiv>\r\n      \r\n    </MainDiv>\r\n  );\r\n}\r\n\r\nconst MainDiv = styled.div`\r\ndisplay: flex;\r\nflex-direction: column;\r\nalign-items: center;\r\njustify-content: center;\r\nbackground-color: #ffffff;\r\nmin-height: 100vh;\r\n@import url(https://cdn.jsdelivr.net/gh/moonspam/NanumSquare@1.0/nanumsquare.css);\r\nfont-family: 'NanumSquare', sans-serif;\r\n`;\r\n\r\nconst SubMainDiv = styled.div`\r\n  margin: 20px;\r\n  \r\n`;","import React from 'react';\nimport logo from './logo.svg';\nimport { Switch, Route, HashRouter, Redirect, Router, BrowserRouter } from 'react-router-dom';\nimport './App.css';\nimport history from './history';\nimport MainPage from './MainPage';\nimport DetailContent from './DetailContent';\nimport UploadPage from './UploadPage';\nfunction App() {\n  \n  const isEdge = window.navigator.userAgent.indexOf('Edge') !== -1;\n  const isIE = window.navigator.userAgent.indexOf('Trident') !== -1 && !isEdge;\n  return isIE ? (\n    <div>\n      Goodbye, Internet Explorer\n    </div> ):(\n      <BrowserRouter basename={\"/\"}>\n        <Switch>\n          <Route exact path={\"/\"} component={MainPage} />\n          <Route exact path={\"/details\"} component={DetailContent} />\n          <Route exact path={\"/uploadfile\"} component={UploadPage} />\n        </Switch>\n      </BrowserRouter>\n      \n        \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}